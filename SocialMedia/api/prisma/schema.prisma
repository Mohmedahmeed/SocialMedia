// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int            @id @default(autoincrement())
  username          String         @unique
  email             String         @unique
  password          String
  bio               String?
  image             String?        @default("https://i.postimg.cc/GpjBs2yq/sbcf-default-avatar.png")
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  posts             Post[]
  comments          Comment[]
  likes             Like[]
  followers         Follow[]       @relation("Follower")
  following         Follow[]       @relation("Following")
  notifications     Notification[] @relation("user")
  notificationsSend Notification[] @relation("Sender")
  conversations     Conversation[] @relation("participants")
  messages          Message[]
}

model Post {
  id            Int            @id @default(autoincrement())
  content       String
  image         String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id])
  userId        Int
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
}

model Like {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("Follower", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("Following", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String
  postId    Int?
  post      Post?    @relation(fields: [postId], references: [id])
  userId    Int
  user      User     @relation("user", fields: [userId], references: [id])
  senderId  Int
  sender    User     @relation("Sender", fields: [senderId], references: [id])
  createdAt DateTime @default(now())
}

model Conversation {
  id           Int       @id @default(autoincrement())
  participants User[]    @relation("participants")
  messages     Message[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id             Int          @id @default(autoincrement())
  content        String
  senderId       Int
  sender         User         @relation(fields: [senderId], references: [id])
  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  createdAt      DateTime     @default(now())
}
